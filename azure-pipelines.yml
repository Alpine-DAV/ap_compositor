###############################################################################
# Ascent CI Checks
###############################################################################
# Ref:
# https://aka.ms/yaml

# only build merge target pr to develop
trigger: none
pr:
  branches:
    include:
    - master

# fast fail sanity checks
stages:
# main checks
- stage: Main
  jobs:
  ###############################################################################
  # Ubuntu build and test, using spack to build tpls
  ###############################################################################
  - job: Ubuntu_16
    pool:
      vmImage: 'ubuntu-16.04'
    timeoutInMinutes: 0
    variables:
      COMPILER_CC: gcc-5
      COMPILER_CXX: g++-5
      COMPILER_FC: gfortran-5
    strategy:
      matrix:
        shared_debug:
          BUILD_SHARED_LIBS: ON
          ENABLE_OPENMP : ON
          CMAKE_BUILD_TYPE: Debug
        shared_release:
          BUILD_SHARED_LIBS: ON
          CMAKE_BUILD_TYPE: Release
          ENABLE_OPENMP : ON
        static_debug:
          BUILD_SHARED_LIBS: OFF
          ENABLE_OPENMP : ON
          CMAKE_BUILD_TYPE: Debug
        static_release:
          BUILD_SHARED_LIBS: OFF
          CMAKE_BUILD_TYPE: Release
          ENABLE_OPENMP : ON
    steps:
      - checkout: self
        clean: boolean
        submodules: recursive

      - script: |
           ##################
           # setup build env
           ##################
           # output env
           cat etc/*rel*
           env
           # clean default paths
           sudo rm -rf /usr/local/lib/android/
           sudo rm -rf /usr/share/miniconda/
           # add extra repo and update
           sudo add-apt-repository ppa:ubuntu-toolchain-r/test
           sudo apt-get update
           # list pkgs we need
           export APT_PKGS=binutils
           export APT_PKGS="$APT_PKGS gcc-5"
           export APT_PKGS="$APT_PKGS g++-5"
           export APT_PKGS="$APT_PKGS openmpi-bin"
           export APT_PKGS="$APT_PKGS libopenmpi-dev"
           export APT_PKGS="$APT_PKGS libncurses-dev"
           export APT_PKGS="$APT_PKGS libssl-dev"
           export APT_PKGS="$APT_PKGS zlib1g-dev"
           export APT_PKGS="$APT_PKGS libgdbm-dev"
           export APT_PKGS="$APT_PKGS libreadline-dev"
           export APT_PKGS="$APT_PKGS libsqlite3-dev"
           export APT_PKGS="$APT_PKGS libbz2-dev"
           export APT_PKGS="$APT_PKGS cmake"
           # install pkgs we need
           sudo apt-get -y install $APT_PKGS
        displayName: 'Prepare build env'

      - script: |
           #################################
           # configure
           #################################
           # setup compiler env vars
           export CC=${COMPILER_CC}
           export CXX=${COMPILER_CXX}
           ${CC} --version
           # capture current path
           export ROOT_DIR=`pwd`
           echo $PATH
           which cmake
           cmake --version
           # prepare build and install dir
           mkdir install
           mkdir build
           cd build
           # setup cmake options
           export CMAKE_OPTS="-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DBUILD_SHARED_LIBS=${BUILD_SHARED_LIBS}"
           export CMAKE_OPTS="${CMAKE_OPTS} -DCMAKE_INSTALL_PREFIX=../install"
           # configure
           cmake ${CMAKE_OPTS} ../src
        displayName: 'Configure with CMake'

      - script: |
           #################################
           # build
           #################################
           # build
           cd build
           make VERBOSE=1
        displayName: 'Build'

      - script: |
           #################################
           # test
           #################################
           # find spack installed cmake
           export ROOT_DIR=`pwd`
           which ctest
           cd build
           # run ctest
           ctest -T test --output-on-failure -V
        displayName: 'Run Unit Tests'

      - script: |
           #################################
           # install
           #################################
           cd build
           make install
        displayName: 'Install'

      - script: |
          ###########################
          # using with cmake example
          ###########################
          pwd
          ls -l
          which cmake
          cd install/examples/apcomp/using-with-cmake
          mkdir _test_build
          cd _test_build
          cmake ../
          make VERBOSE=1
          ./apcomp_example
        displayName: 'Test vs Install (using-with-cmake)'
        condition: succeeded()

        - script: |
          ###########################
          # using with make example
          ###########################
          cat install/share/apcomp/apcomp_config.mk
          pwd
          ls -l
          cd install/examples/apcomp/using-with-make
          make
          ./apcomp_example
        displayName: 'Test vs Install (using-with-make)'
        condition: succeeded()
